services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks: [appnet]

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - redisdata:/data
    restart: unless-stopped
    networks: [appnet]

  minio:
    image: minio/minio:RELEASE.2024-06-04T19-20-08Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    volumes:
      - miniodata:/data
    ports:
      - "9001:9001"   # MinIO Console (UI)
    restart: unless-stopped
    networks: [appnet]

  # PHP-FPM (Laravel)
  laravel:
    build:
      context: .
      dockerfile: ./docker/laravel/Dockerfile
    environment:
      APP_ENV: production
      APP_URL: https://localhost
      APP_KEY: "base64:o9TzU9JYvWgC2Pv2E+S+KkuqvDy5xO7K8bR3vO20eNE="
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: appdb
      DB_USERNAME: app
      DB_PASSWORD: app_password
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FILESYSTEM_DISK: s3
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio12345
      AWS_DEFAULT_REGION: auto
      AWS_BUCKET: uploads
      AWS_ENDPOINT: http://minio:9000
      AWS_USE_PATH_STYLE_ENDPOINT: "true"
    depends_on:
      - postgres
      - redis
      - minio
    restart: unless-stopped
    networks: [appnet]

  # Build-only FE → xuất artefact tĩnh sang volume static_frontend
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: https://localhost
    command: ["sh", "-lc", "cp -rf /export/* /mounted || true; echo 'FE copied'; sleep 0"]
    volumes:
      - static_frontend:/mounted
    restart: "no"
    networks: [appnet]

  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    depends_on:
      - laravel
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_frontend:/usr/share/nginx/html:ro
      - ./docker/certs:/etc/nginx/certs:ro
    restart: unless-stopped
    networks: [appnet]

networks:
  appnet: {}

volumes:
  pgdata: {}
  redisdata: {}
  miniodata: {}
  static_frontend: {}
